import { Box } from '@mui/material'
import * as d3Hierarchy from 'd3-hierarchy'
import * as d3Selection from 'd3-selection'

import { useEffect, useRef } from 'react'
import { colorScale } from './CirclePackingUtils'
import { Network } from '../../../../models/NetworkModel'
import { Table } from '../../../../models/TableModel'
import { D3TreeNode, createTreeLayout } from './CirclePackingLayout'

interface CirclePackingPanelProps {
  width: number
  height: number
  network?: Network
  nodeTable: Table
  edgeTable: Table
}

// interface CirclePackingNode {
//   name: string
//   children?: CirclePackingNode[]
//   value?: number
//   x: number
//   y: number
//   r: number
// }
/**
 * Simple circle packing layout
 *
 * TODO: Add interactivity
 *
 * @param param0
 * @returns
 */
export const CirclePackingPanel = ({
  width,
  height,
  network,
  nodeTable,
  edgeTable,
}: CirclePackingPanelProps): JSX.Element => {
  if (network === undefined) {
    return <></>
  }

  // Use this ref to access the SVG element generated by D3
  const ref = useRef(null)

  useEffect(() => {
    if (ref.current === null) return
    const rootNode: d3Hierarchy.HierarchyNode<D3TreeNode> = createTreeLayout(
      network,
      nodeTable,
      edgeTable,
    )
    console.log('rootNode', rootNode)

    const pack = d3Hierarchy.pack().size([width, height]).padding(3)

    pack(rootNode)

    const svg = d3Selection.select(ref.current)

    svg
      .selectAll('circle')
      .data(rootNode.descendants())
      .join('circle')
      .attr('cx', (d: d3Hierarchy.HierarchyCircularNode<any>) => d.x)
      .attr('cy', (d: d3Hierarchy.HierarchyCircularNode<any>) => d.y)
      .attr('r', (d: d3Hierarchy.HierarchyCircularNode<any>) => d.r)
      .attr('fill', (d) => colorScale(d.depth))
  }, [])

  return (
    <Box sx={{ width: '100%', height: '100%', border: '2px solid red' }}>
      <svg ref={ref} width={width} height={height} />
    </Box>
  )
}
